{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Profile, ProfileAddress } from '../dtos/ProfileDTO';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/profiles.service\";\nimport * as i2 from \"../services/address.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/radio\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"../dtos/ProfileDTO\";\n\nfunction ProfileFormComponent_ul_8_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const error_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(error_r4.message);\n  }\n}\n\nfunction ProfileFormComponent_ul_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 23);\n    i0.ɵɵtemplate(1, ProfileFormComponent_ul_8_li_1_Template, 2, 1, \"li\", 24);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.errorMessages);\n  }\n}\n\nfunction ProfileFormComponent_mat_option_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const state_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", state_r5.stateAbrev);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", state_r5.stateName, \" \");\n  }\n}\n\nfunction ProfileFormComponent_button_55_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function ProfileFormComponent_button_55_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.submitProfile());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 22);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r2.uxFormProfileDetail.valid || ctx_r2.uxFormProfileDetail.valid && ctx_r2.uxFormProfileDetail.pristine);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.SelectedProfile === undefined ? \"person_add\" : \"person\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.SelectedProfile === undefined ? \"Add\" : \"Update\", \" \");\n  }\n}\n\nexport let ProfileFormComponent = /*#__PURE__*/(() => {\n  class ProfileFormComponent {\n    constructor(aProfileService, aAddressService, formBuilder, dialogProfileRef, data) {\n      this.aProfileService = aProfileService;\n      this.aAddressService = aAddressService;\n      this.formBuilder = formBuilder;\n      this.dialogProfileRef = dialogProfileRef;\n      this.data = data;\n      this.errorMessages = [];\n      this.IsUnexpectedError = false;\n      this.uxFormProfileDetail = formBuilder.group({\n        uxFirstName: new FormControl(\"\", [Validators.required]),\n        uxLastName: new FormControl(\"\", [Validators.required]),\n        uxActive: new FormControl(\"false\"),\n        uxAddress1: new FormControl(\"\", [Validators.required]),\n        uxAddress2: new FormControl(\"\"),\n        uxCity: new FormControl(\"\", [Validators.required]),\n        uxStateAbrev: new FormControl(\"\", [Validators.required]),\n        uxZipCode: new FormControl(\"\", [Validators.required, Validators.minLength(5), Validators.maxLength(5)]),\n        uxPhoneNumber: new FormControl(\"555-123-5678\", [Validators.required])\n      });\n      this.uxFormControls = this.uxFormProfileDetail.controls;\n\n      if (data !== null) {\n        this.SelectedProfile = data;\n        this.uxFormControls.uxFirstName.value = data.firstName;\n        this.uxFormControls.uxLastName.value = data.lastName;\n        this.uxFormControls.uxActive.value = data.active ? \"true\" : \"false\";\n        let AddressPrimary = data.addresses.find(profileFilter => profileFilter.isPrimary === true);\n\n        if (AddressPrimary) {\n          this.uxFormControls.uxAddress1.value = AddressPrimary.address1;\n          this.uxFormControls.uxAddress2.value = AddressPrimary.address2;\n          this.uxFormControls.uxCity.value = AddressPrimary.city;\n          this.uxFormControls.uxStateAbrev.value = AddressPrimary.stateAbrev;\n          this.uxFormControls.uxZipCode.value = AddressPrimary.zipCode;\n        }\n      } else {\n        this.uxFormControls.uxActive.value = \"true\";\n      }\n    }\n\n    ngOnInit() {\n      this.populateForm();\n    }\n\n    populateForm() {\n      if (this.StatesLists === undefined) {\n        this.aAddressService.getStates().subscribe(data => {\n          this.StatesLists = data;\n        }, error => {\n          this.IsUnexpectedError = true;\n          this.errorMessages = error;\n        });\n      }\n    }\n\n    closeProfileDetail() {\n      this.dialogProfileRef.close();\n    }\n\n    submitProfile() {\n      if (this.SelectedProfile === undefined) {\n        this.createProfileAction();\n      } else if (this.SelectedProfile !== undefined) {\n        this.updateProfileAction();\n      }\n    }\n\n    createProfileAction() {\n      let NewProfile = new Profile();\n      NewProfile.firstName = this.uxFormControls.uxFirstName.value;\n      NewProfile.lastName = this.uxFormControls.uxLastName.value;\n      NewProfile.active = this.uxFormControls.uxActive.value === 'true' ? true : false;\n      {\n        let PrimaryAddress = new ProfileAddress();\n        PrimaryAddress.isPrimary = true;\n        PrimaryAddress.address1 = this.uxFormControls.uxAddress1.value;\n        PrimaryAddress.address2 = this.uxFormControls.uxAddress2.value;\n        PrimaryAddress.city = this.uxFormControls.uxCity.value;\n        PrimaryAddress.stateAbrev = this.uxFormControls.uxStateAbrev.value;\n        PrimaryAddress.zipCode = this.uxFormControls.uxZipCode.value;\n        NewProfile.addresses = [PrimaryAddress];\n      }\n      this.aProfileService.addProfile(NewProfile).subscribe(data => {\n        if (data != null) {\n          this.closeProfileDetail();\n        }\n      }, error => {\n        this.errorMessages = error;\n      });\n    }\n\n    updateProfileAction() {\n      this.aProfileService.getProfile(this.SelectedProfile.profileId).subscribe(ProfileToUpdate => {\n        ProfileToUpdate.firstName = this.uxFormControls.uxFirstName.value;\n        ProfileToUpdate.lastName = this.uxFormControls.uxLastName.value;\n        ProfileToUpdate.active = this.uxFormControls.uxActive.value === 'true' ? true : false;\n        let PrimaryAddress = ProfileToUpdate.addresses.find(profileFilter => profileFilter.isPrimary === true);\n\n        if (PrimaryAddress) {\n          PrimaryAddress.address1 = this.uxFormControls.uxAddress1.value;\n          PrimaryAddress.address2 = this.uxFormControls.uxAddress2.value;\n          PrimaryAddress.city = this.uxFormControls.uxCity.value;\n          PrimaryAddress.stateAbrev = this.uxFormControls.uxStateAbrev.value;\n          PrimaryAddress.zipCode = this.uxFormControls.uxZipCode.value;\n        }\n\n        this.aProfileService.updateProfile(ProfileToUpdate).subscribe(data => {\n          this.closeProfileDetail();\n        }, error => this.errorMessages = error);\n      });\n    }\n\n  }\n\n  ProfileFormComponent.ɵfac = function ProfileFormComponent_Factory(t) {\n    return new (t || ProfileFormComponent)(i0.ɵɵdirectiveInject(i1.ProfilesService), i0.ɵɵdirectiveInject(i2.AddressService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  ProfileFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProfileFormComponent,\n    selectors: [[\"profile-form\"]],\n    decls: 61,\n    vars: 4,\n    consts: [[3, \"formGroup\"], [1, \"matcard-container-header\", \"mat-elevation-z8\", 2, \"border-radius\", \"10px 10px 0px 0px\"], [1, \"matcard-container-header\"], [1, \"mat-elevation-z8\", 2, \"border-radius\", \"0px 0px 10px 10px\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"matInput\", \"\", \"required\", \"\", \"placeholder\", \"First Name\", \"formControlName\", \"uxFirstName\"], [\"matInput\", \"\", \"required\", \"\", \"placeholder\", \"Last Name\", \"formControlName\", \"uxLastName\"], [1, \"example-margin\"], [\"formControlName\", \"uxActive\", \"required\", \"\"], [\"value\", \"true\", 1, \"example-margin\"], [\"value\", \"false\", 1, \"example-margin\"], [\"matInput\", \"\", \"required\", \"\", \"placeholder\", \"Address1\", \"formControlName\", \"uxAddress1\"], [\"matInput\", \"\", \"placeholder\", \"Address2\", \"formControlName\", \"uxAddress2\"], [\"matInput\", \"\", \"required\", \"\", \"placeholder\", \"City\", \"formControlName\", \"uxCity\"], [\"formControlName\", \"uxStateAbrev\", \"required\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"maxlength\", \"5\", \"placeholder\", \"Postal Code\", \"formControlName\", \"uxZipCode\"], [\"matPrefix\", \"\"], [\"type\", \"tel\", \"required\", \"\", \"matInput\", \"\", \"placeholder\", \"Telephone\", \"formControlName\", \"uxPhoneNumber\"], [1, \"matcard-container-action\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", \"style\", \"border-radius: 15px;\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"button\", 2, \"border-radius\", \"15px\", 3, \"click\"], [\"aria-hidden\", \"false\", \"aria-label\", \"person icon\"], [1, \"error-message\"], [4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 2, \"border-radius\", \"15px\", 3, \"disabled\", \"click\"]],\n    template: function ProfileFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-card-header\", 1)(2, \"mat-card-title\", 2);\n        i0.ɵɵtext(3, \" Profile Detail \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-card-subtitle\", 2);\n        i0.ɵɵtext(5, \"The user profile detail.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"mat-card\", 3)(7, \"mat-card-content\");\n        i0.ɵɵtemplate(8, ProfileFormComponent_ul_8_Template, 2, 1, \"ul\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-card-content\")(10, \"mat-form-field\");\n        i0.ɵɵelement(11, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\");\n        i0.ɵɵelement(13, \"input\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"mat-card-content\")(15, \"section\")(16, \"label\", 7);\n        i0.ɵɵtext(17, \"Active:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-radio-group\", 8)(19, \"mat-radio-button\", 9);\n        i0.ɵɵtext(20, \"Yes \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"mat-radio-button\", 10);\n        i0.ɵɵtext(22, \" No\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(23, \"mat-card-content\");\n        i0.ɵɵtext(24, \" \\u00A0 \");\n        i0.ɵɵelement(25, \"br\");\n        i0.ɵɵelementStart(26, \"mat-form-field\");\n        i0.ɵɵelement(27, \"input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(28, \"br\");\n        i0.ɵɵelementStart(29, \"mat-form-field\");\n        i0.ɵɵelement(30, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(31, \"br\");\n        i0.ɵɵelementStart(32, \"mat-form-field\");\n        i0.ɵɵelement(33, \"input\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(34, \"br\");\n        i0.ɵɵelementStart(35, \"mat-form-field\")(36, \"mat-label\");\n        i0.ɵɵtext(37, \"State\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"mat-select\", 14)(39, \"mat-option\");\n        i0.ɵɵtext(40, \"--\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(41, ProfileFormComponent_mat_option_41_Template, 2, 2, \"mat-option\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"mat-hint\");\n        i0.ɵɵtext(43, \"Selete a State\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(44, \"br\");\n        i0.ɵɵtext(45, \"\\u00A0\");\n        i0.ɵɵelement(46, \"br\");\n        i0.ɵɵelementStart(47, \"mat-form-field\");\n        i0.ɵɵelement(48, \"input\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(49, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"mat-form-field\")(51, \"span\", 17);\n        i0.ɵɵtext(52, \"+1 \\u00A0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(53, \"input\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"mat-card-actions\", 19);\n        i0.ɵɵtemplate(55, ProfileFormComponent_button_55_Template, 4, 3, \"button\", 20);\n        i0.ɵɵtext(56, \" \\u00A0 \");\n        i0.ɵɵelementStart(57, \"button\", 21);\n        i0.ɵɵlistener(\"click\", function ProfileFormComponent_Template_button_click_57_listener() {\n          return ctx.closeProfileDetail();\n        });\n        i0.ɵɵelementStart(58, \"mat-icon\", 22);\n        i0.ɵɵtext(59, \"cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(60, \" Cancel \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.uxFormProfileDetail);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessages.length > 0);\n        i0.ɵɵadvance(33);\n        i0.ɵɵproperty(\"ngForOf\", ctx.StatesLists);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngIf\", ctx.IsUnexpectedError == false);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i6.MatOption, i7.MatButton, i8.MatCard, i8.MatCardHeader, i8.MatCardContent, i8.MatCardTitle, i8.MatCardSubtitle, i8.MatCardActions, i9.MatIcon, i10.MatFormField, i10.MatHint, i10.MatLabel, i10.MatPrefix, i11.MatInput, i12.MatRadioGroup, i12.MatRadioButton, i13.MatSelect]\n  });\n  return ProfileFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}