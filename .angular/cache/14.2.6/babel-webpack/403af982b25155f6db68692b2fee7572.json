{"ast":null,"code":"// import { MatDialogRef, MAT_DIALOG_DATA, ErrorStateMatcher } from '@angular/material';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, FormControl, Validators, FormGroupDirective } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\n\nfunction LoginComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction LoginComponent_mat_error_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter three or more characters \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n/** Error when invalid control is dirty, touched, or submitted. */\n\n\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(dialogRef, data, fb) {\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.matcher = new MyErrorStateMatcher();\n      this.uxForm = fb.group({\n        emailFormControl: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(40), Validators.email]),\n        uxUserPassword: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(40)])\n      });\n    }\n\n    submitLogin() {\n      this.dialogRef.close();\n    }\n\n    cancelLogin() {\n      this.dialogRef.close();\n    }\n\n    ngOnInit() {}\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 29,\n    vars: 8,\n    consts: [[3, \"formGroup\"], [1, \"matcard-container-header\", 2, \"border-radius\", \"15px 15px 0px 0px\"], [1, \"matcard-container-header\"], [1, \"example-full-width\"], [\"matInput\", \"\", \"placeholder\", \"Email\", \"formControlName\", \"emailFormControl\", 3, \"formControl\", \"errorStateMatcher\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"maxLength\", \"40\", \"size\", \"40\", \"formControlName\", \"uxUserPassword\"], [1, \"matcard-container-action\", 2, \"border-radius\", \"0px 0px 15px 15px\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 2, \"border-radius\", \"15px\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"button\", 2, \"border-radius\", \"15px\", 3, \"click\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-card-header\", 1)(2, \"mat-card-title\", 2);\n        i0.ɵɵtext(3, \" Sign In \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-card-subtitle\", 2);\n        i0.ɵɵtext(5, \"Please enter your log in credentials.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"mat-card\")(7, \"mat-card-content\")(8, \"mat-card-content\")(9, \"mat-form-field\", 3);\n        i0.ɵɵelement(10, \"input\", 4);\n        i0.ɵɵelementStart(11, \"mat-hint\");\n        i0.ɵɵtext(12, \"Enter a valid email address.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, LoginComponent_mat_error_13_Template, 2, 0, \"mat-error\", 5);\n        i0.ɵɵtemplate(14, LoginComponent_mat_error_14_Template, 4, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(15, \"mat-card-content\")(16, \"mat-card-content\")(17, \"mat-form-field\", 3);\n        i0.ɵɵelement(18, \"input\", 6);\n        i0.ɵɵelementStart(19, \"mat-hint\");\n        i0.ɵɵtext(20, \"Enter a valid password.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(21, LoginComponent_mat_error_21_Template, 2, 0, \"mat-error\", 5);\n        i0.ɵɵtemplate(22, LoginComponent_mat_error_22_Template, 4, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"mat-card-actions\", 7)(24, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_24_listener() {\n          return ctx.submitLogin();\n        });\n        i0.ɵɵtext(25, \"Log In\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(26, \" \\u00A0 \");\n        i0.ɵɵelementStart(27, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_27_listener() {\n          return ctx.cancelLogin();\n        });\n        i0.ɵɵtext(28, \"Cancel\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.uxForm);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"formControl\", ctx.emailFormControl)(\"errorStateMatcher\", ctx.matcher);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.uxForm.controls.emailFormControl.hasError(\"email\") && !ctx.uxForm.controls.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.uxForm.controls.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.uxForm.controls.uxUserPassword.hasError(\"minlength\") && !ctx.uxForm.controls.uxUserPassword.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.uxForm.controls.uxUserPassword.hasError(\"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.uxForm.valid);\n      }\n    },\n    dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormControlDirective, i2.FormGroupDirective, i2.FormControlName, i4.MatButton, i5.MatCard, i5.MatCardHeader, i5.MatCardContent, i5.MatCardTitle, i5.MatCardSubtitle, i5.MatCardActions, i6.MatError, i6.MatFormField, i6.MatHint, i7.MatInput],\n    styles: [\".matcard-container-header[_ngcontent-%COMP%]{background-color:#673ab7;color:#fff;padding:5px;margin:0}.matcard-container-action[_ngcontent-%COMP%]{text-align:center}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}