{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let ProfilesService = /*#__PURE__*/(() => {\n  class ProfilesService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getProfiles(active) {\n      return this.http.get(environment.URLServicesProfile).pipe(catchError(this.handleError));\n    }\n\n    getProfile(profileId) {\n      return this.http.get(`${environment.URLServicesProfile}/${profileId}`).pipe(catchError(this.handleError));\n    }\n\n    addProfile(profile) {\n      return this.http.put(environment.URLServicesProfile, profile, httpOptions).pipe(catchError(this.handleError));\n    }\n\n    deleteProfile(aProfile) {\n      let URLGetProfile = `${environment.URLServicesProfile}/${aProfile.profileId}`;\n      return this.http.delete(URLGetProfile).pipe(catchError(this.handleError));\n    }\n\n    updateProfile(profile) {\n      let URLUpdateProfile = environment.URLServicesProfile;\n      return this.http.post(`${URLUpdateProfile}/`, profile).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        let ErrorList;\n        ErrorList = error.error;\n        return throwError(ErrorList);\n      }\n\n      return throwError('An unexpected error occured. Please try again later.');\n    }\n\n  }\n\n  ProfilesService.ɵfac = function ProfilesService_Factory(t) {\n    return new (t || ProfilesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProfilesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProfilesService,\n    factory: ProfilesService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ProfilesService;\n})();","map":null,"metadata":{},"sourceType":"module"}