{"ast":null,"code":"import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AddressService = /*#__PURE__*/(() => {\n  class AddressService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    //#region Get States\n    getStates() {\n      return this.http.get(environment.URLServicesStates).pipe(catchError(this.handleError));\n    } //#endregion\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        let ErrorList;\n        ErrorList = error.error;\n        return throwError(ErrorList);\n      } // return an observable with a user-facing error message\n\n\n      return throwError('An unexpected error occured. Please try again later.');\n    }\n\n  }\n\n  AddressService.ɵfac = function AddressService_Factory(t) {\n    return new (t || AddressService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AddressService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddressService,\n    factory: AddressService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AddressService;\n})();","map":null,"metadata":{},"sourceType":"module"}